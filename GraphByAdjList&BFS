package Graph;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Queue;
/**
 * @author Naveen
 * Graph representation using adj.list and traversing using BFS
 *
 */

class Graphlist {
	int v;
	LinkedList<Integer> list[];

	public Graphlist(int vertices) {
		this.v = vertices;
		list = new LinkedList[v];

		for (int i = 0; i < v; i++) {
			list[i] = new LinkedList();
		}
	}

	/**
	 * BFS traversal-->using Queue and one boolean array
	 */

	public void bfs(int s) {
		boolean visited[] = new boolean[v];
		Queue<Integer> queue = new LinkedList();
		visited[s] = true;
		queue.add(s);
		while (queue.size() != 0) {
			s= queue.poll();
			System.out.println(s);
			Iterator<Integer> i = list[s].listIterator();
			while (i.hasNext()) {
				int n = i.next();
				if (!visited[n]) {
					visited[n] = true;
					queue.add(n);

				}
			}

		}
	}

	public void addEdge(Graphlist graph, int src, int dest) {
		graph.list[src].add(dest);
		graph.list[dest].add(src);

	}

}


public class GraphByList {
	public static void main(String[] args) {
		int vertices = 5;
		Graphlist graph = new Graphlist(vertices);
		graph.addEdge(graph, 0, 1);
		graph.addEdge(graph, 0, 4);
		graph.addEdge(graph, 1, 2);
		graph.addEdge(graph, 1, 3);
		graph.addEdge(graph, 1, 4);
		graph.addEdge(graph, 2, 3);
		graph.addEdge(graph, 3, 4);
		graph.bfs(4);

	}

}
